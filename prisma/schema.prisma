generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model GuildPermission {
    guildId String @unique
    collectBlockword Boolean @default(false)
    collectBan Boolean @default(false)
}

model GuildOption {
    guildId String @unique

    banChannelId String @default("")
    banMessageEnabled Boolean @default(false)

    unbanChannelId String @default("")
    unbanMessageEnabled Boolean @default(false)
    
    welcomeChannelId String @default("")
    welcomeMessage String @default(":wave: 안녕하세요, {user}님!")
    welcomeMessageEnabled Boolean @default(false)

    goodbyeChannelId String @default("")
    goodbyeMessage String @default(":cry: {user}님이 나가셨습니다.")
    goodbyeMessageEnabled Boolean @default(false)

    logChannelId String @default("")
    logEnabled Boolean @default(false)

    checkModsMessage Boolean @default(false)
    blockwordDisabledChannel String[] @default([])

    useLevelSystem Boolean @default(true)
    levelUpMessage String @default(":partying_face: {user}님의 레벨이 올랐습니다! Level {beforelevel} -> {afterlevel}")
    levelUpMessageEnabled Boolean @default(true)
    levelUpChannelId String @default("")
    messageInLevelupChannel Boolean @default(true)

    enableLegacyCommand Boolean @default(false)
}

model GuildChannel {
    guildId String
    channelId String @unique
    channelName String
    channelType Int
}

model GuildData {
    guildId String @unique
    name String
    ownerId String
    icon String

    memberCount Int
    botCount Int
    region String
    createdAt DateTime
    isPartner Boolean
    isVerified Boolean
    premiumTier Int
    premiumSubscriptionCount Int
    description String

    isCommunityGuild Boolean @default(false)
    isSettingComplete Boolean @default(false)
}

model GuildBan {
    userId String @unique
    guildId String
    username String
    nickname String
    tag String
    profileImg String
    reason String
    createdAt DateTime @default(now())
}

model UserData {
    id String @unique
    username String
    tag String
    profileImg String
    bannedGuild String[]
    ownedGuild String[]
}

model MemberData {
    uniqueId Int @id @default(autoincrement())
    userId String
    guildId String
    username String
    nickname String
    tag String
    profileImg String

    mod Boolean @default(false)
    isOwner Boolean @default(false)

    joinedAt DateTime
    exp Int @default(0)
    level Int @default(1)
    warning Int @default(0)

    point Int @default(25000)
}

model Blockword {
    uniqueId Int @id @default(autoincrement())
    guildId String 
    word String[] @default([])
}

model ErrorLog {
    id Int @id @default(autoincrement())
    content Json
    createdAt DateTime @default(now())
}

model GuildRole {
    id String @unique
    name String
    guildId String
    type String
}

model GuildLogSetting {
    guildId String @unique

    userCreate Boolean @default(false)
    userDelete Boolean @default(false)

    addMod Boolean @default(false)
    removeMod Boolean @default(false)

    useCommand Boolean @default(false)

    useBlockword Boolean @default(false)
    addBlockword Boolean @default(false)
    removeBlockword Boolean @default(false)

    removeMessage Boolean @default(false)

    levelUp Boolean @default(false)

    addRoleToMember Boolean @default(false)
    removeRoleToMember Boolean @default(false)

    addBan Boolean @default(false)
    removeBan Boolean @default(false)

    getWarning Boolean @default(false)
    removeWarning Boolean @default(false)
}

model GuildLog {
    uniqueId Int @id @default(autoincrement())
    guildId String
    type String
    content String
    rawContent String
    createdAt DateTime
}

model CoinData {
    id Int @id @unique
    name String
    price Int
    createdAt DateTime @default(now())

    priceHistory Int[] @default([])
}

model MemberCoinData {
    uniqueId Int @id @default(autoincrement())
    name String
    amount Int @default(0)
    createdAt DateTime @default(now())
}

